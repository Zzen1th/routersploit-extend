import json

from routersploit.core.exploit import print_error, print_success
from routersploit.core.exploit.exceptions import RoutersploitException
from .base import BaseSave


class Save(BaseSave):
    """ File search engine """

    def __init__(self, *args, **kwargs):
        super(Save, self).__init__(*args, **kwargs)
        self.file_path = ''

    def parse_protocal(self, protocal_str: str) -> bool:
        if not protocal_str.strip().startswith('{}://'.format(self.save_name)):
            raise RoutersploitException(
                "Save {} protocal must start switch {}://".format(self.save_name, self.save_name))
        _, _, self.file_path = protocal_str.strip().partition('{}://'.format(self.save_name))
        return True

    def protocal_info(self) -> str:
        return "{}://filepath".format(self.save_name)

    def save(self, protocol_str: str, results: dict):
        self.parse_protocal(protocol_str)

        try:
            with open(self.file_path, 'w') as f:
                f.write(json.dumps(results))
            print_success('Exploit results has successful save to {}'.format(self.file_path))
        except Exception as e:
            print_error(str(e))
