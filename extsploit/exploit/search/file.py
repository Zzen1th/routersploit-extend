from routersploit.core.exploit import print_error
from routersploit.core.exploit.exceptions import RoutersploitException
from .base import BaseSearch


class Search(BaseSearch):
    """ File search engine """

    def __init__(self, *args, **kwargs):
        super(Search, self).__init__(*args, **kwargs)
        self.file_path = ''

    def parse_protocal(self, protocal_str: str) -> bool:
        if not protocal_str.strip().startswith('{}://'.format(self.engine_name)):
            raise RoutersploitException(
                "Engine {} protocal must start switch {}://".format(self.engine_name, self.engine_name))
        _, _, self.file_path = protocal_str.strip().partition('{}://'.format(self.engine_name))
        return True

    def protocal_info(self) -> str:
        return "{}://filepath".format(self.engine_name)

    def search(self, protocol_str: str) -> set:
        self.parse_protocal(protocol_str)
        search_result = set()
        try:
            file_path = self.file_path
            with open(file_path, 'r') as file_handler:
                for target in file_handler:
                    target = target.strip()
                    if not target:
                        continue
                    search_result.add(target)
        except Exception as err:
            print_error(str(err))
        return search_result
