import getpass
import urllib
from configparser import ConfigParser

from routersploit.core.exploit.exceptions import RoutersploitException
from routersploit.core.exploit.printer import (
    print_info,
    print_error,
    print_status,
)
from .base import BaseSearch
from routersploit.extsploit.settings import CONF_PATH
from routersploit.extsploit.exploit.request import requests


class Search(BaseSearch):
    """ Zoomeye search engine """

    def __init__(self, conf_path=CONF_PATH, username=None, password=None, *args, **kwargs):
        super(Search, self).__init__(*args, **kwargs)
        self.headers = None
        self.token = None
        self.resources = None
        self.plan = None
        self.conf_path = conf_path
        self.username = username
        self.password = password

        self.search_parm = {
            'query': '',
            'pages': '1',
            'resource': 'host'
        }

        if self.conf_path:
            self.parser = ConfigParser()
            self.parser.read(self.conf_path)
            try:
                self.token = self.parser.get(self.engine_name, 'token')
            except:
                pass

    def token_is_available(self):
        if self.token:
            headers = {'Authorization': 'JWT %s' % self.token}
            try:
                resp = requests.get('https://api.zoomeye.org/resources-info', headers=headers, verify=False)
                if resp and resp.status_code == 200 and "plan" in resp.json():
                    self.headers = headers
                    return True
            except Exception as e:
                print_error(str(e))
        return False

    def new_token(self):
        data = '{{"username": "{}", "password": "{}"}}'.format(self.username, self.password)
        try:
            resp = requests.post('https://api.zoomeye.org/user/login', data=data)
            if resp.status_code != 401 and "access_token" in resp.json():
                content = resp.json()
                self.token = content['access_token']
                self.headers = {'Authorization': 'JWT %s' % self.token}
                return True
        except Exception as e:
            print_error(str(e))
        return False

    def check_account(self):
        if self.token_is_available():
            return True
        else:
            print_status("Your token has expired or validï¼Œtry to login again.")
            if self.username and self.password:
                if self.new_token():
                    self.write_conf()
                    return True
            else:
                login_count = 0
                while login_count < 3:
                    username = input("Zoomeye email account:")
                    password = getpass.getpass("Zoomeye password:")
                    self.username = username
                    self.password = password
                    if self.new_token():
                        self.write_conf()
                        print_status("Login success!", "status")
                        return True
                    login_count += 1

                print_info("You have try 3 times. Login fail:)", "status")
                return False

    def write_conf(self):
        if not self.parser.has_section(self.engine_name):
            self.parser.add_section(self.engine_name)
        try:
            self.parser.set(self.engine_name, "token", self.token)
            self.parser.write(open(self.conf_path, "w"))
        except Exception as e:
            print_error(str(e))

    def get_resource_info(self):
        if self.check_account():
            try:
                resp = requests.get('https://api.zoomeye.org/resources-info', headers=self.headers)
                if resp and resp.status_code == 200 and 'plan' in resp.json():
                    content = resp.json()
                    self.plan = content['plan']
                    self.resources = content['resources']['search']
                    return True
            except Exception as e:
                print_error(str(e))
        return False

    def protocal_info(self):
        return "{}://{}".format(self.engine_name,
                                 urllib.parse.urlencode(
                                     self.search_parm))

    def parse_protocal(self, protocal_str: str):
        if not protocal_str.strip().startswith('{}://'.format(self.engine_name)):
            raise RoutersploitException(
                "Engine {} protocal must start switch {}://".format(self.engine_name, self.engine_name))

        _, _, query = protocal_str.strip().partition('{}://'.format(self.engine_name))
        for parm in query.split('&'):
            key, _, value = parm.partition('=')
            if key and value and key in self.search_parm:
                self.search_parm[key] = value

        for key, value in self.search_parm.items():
            if not value:
                raise RoutersploitException(
                    "Parse {} protocal error, you provide parm {} value is None,{} protocal is like: {}".format(
                        self.engine_name, key, self.engine_name, self.protocal_info()))
        return True

    def search(self, protocal_str: str):
        self.parse_protocal(protocal_str)
        try:
            query = self.search_parm['query']
            pages = int(self.search_parm['pages'])
            resource = self.search_parm['resource']

            search_result = set()

            if not self.get_resource_info():
                print_status("Get resuorce failed:)")
                return search_result

            print_info("Search limit {0}".format(self.resources))
            for page in range(1, pages + 1):
                url = "https://api.zoomeye.org/{}/search?query={}&page={}&facet=app,os".format(resource,
                                                                                               urllib.parse.quote(
                                                                                                   query), page)
                resp = requests.get(url, headers=self.headers)
                if resp and resp.status_code == 200 and "matches" in resp.json():
                    content = resp.json()
                    if resource == 'web':
                        search_result.update([match['site'] for match in content['matches']])
                    else:
                        for match in content['matches']:
                            ans = match['ip']
                            if 'portinfo' in match:
                                ans += ':' + str(match['portinfo']['port'])
                            search_result.add(ans)
        except Exception as e:
            raise RoutersploitException('Engine {} search error: {}'.format(self.engine_name, str(e)))
        return search_result
