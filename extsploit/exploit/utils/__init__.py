import importlib
import os

from routersploit.core.exploit import (
    print_error
)
from routersploit.core.exploit.exceptions import RoutersploitException
from routersploit.core.exploit.utils import humanize_path
from routersploit.extsploit.settings import ENGINE_DIR, SAVE_DIR


def index_modules(modules_directory: str) -> dict:
    """ Returns all module

    :param str modules_directory: settings to engine directory
    :return dict: key is module name and value is module python settings
    """

    engines = {}
    spec_file = ["__init__.py", "base.py"]
    modules_directory = modules_directory.replace('/', os.sep)
    for root, dirs, files in os.walk(modules_directory):
        _, package, root = root.partition("routersploit/".replace("/", os.sep))
        root = root.replace(os.sep, ".")
        files = filter(lambda x: all(not x.startswith(spec) for spec in spec_file) and x.endswith(".py"), files)
        engines.update({os.path.splitext(file)[0]: ".".join((root, os.path.splitext(file)[0])) for file in files})

    return engines


def import_engine(path: str):
    """ Import Search engine
    :param str path: engine python path
    :return: Search module
    """
    try:
        module = importlib.import_module(path)
        if hasattr(module, "Search"):
            return getattr(module, "Search")()
        else:
            raise ImportError("No module named '{}'".format(path))

    except (ImportError, AttributeError, KeyError) as err:
        raise RoutersploitException(
            "Error during loading '{}'\n\n"
            "Error: {}\n\n".format(humanize_path(path), err)
        )


def get_engine_module(engine_name: str, engine_directory: str = ENGINE_DIR):
    """
    :param str engine_name: engine name
    :param str engine_directory: engine directory
    :return: Search module
    """
    try:
        engines_dct = index_modules(engine_directory)
        return import_engine(engines_dct[engine_name])
    except RoutersploitException as err:
        raise err
    except KeyError:
        raise RoutersploitException("Engine {} doesn't exist.".format(engine_name))


def get_engines_protocal_info(engine_directory: str = ENGINE_DIR) -> list:
    """ Get all engines protocal info
    :return:
    """

    info_lst = []
    for engine_name in index_modules(engine_directory):
        engine = get_engine_module(engine_name)
        try:
            info_lst.append(engine.protocal_info())
        except Exception as err:
            print_error("Get engine '{}' protocal Error: {}".format(engine.engine_name, str(err)))
    return info_lst


def get_targets_from_engine(engine_protocal: str):
    """
    :param engine_protocal: engine protocal string
    :return: Generator contains ip and port
    """

    engine_name, _, _ = engine_protocal.strip().partition(':')
    try:
        engine = get_engine_module(engine_name)
        for target in engine.search(engine_protocal):
            target, _, port = target.partition(":")
            yield target, port
    except RoutersploitException as err:
        raise err
    except Exception as err:
        raise RoutersploitException(
            "Error during fetch target from '{}' engine\n\n"
            "Error: {}\n\n".format(engine_name, err)
        )


def import_save(path: str):
    """ Import Save module
    :param str path: Save module python path
    :return: Save module
    """
    try:
        module = importlib.import_module(path)
        if hasattr(module, "Save"):
            return getattr(module, "Save")()
        else:
            raise ImportError("No module named '{}'".format(path))

    except (ImportError, AttributeError, KeyError) as err:
        raise RoutersploitException(
            "Error during loading '{}'\n\n"
            "Error: {}\n\n".format(humanize_path(path), err)
        )


def get_save_module(save_name: str, save_directory: str = SAVE_DIR):
    """
    :param str save_name: save name
    :param str save_directory: save directory
    :return: Save module
    """
    try:
        saves_dct = index_modules(save_directory)
        return import_save(saves_dct[save_name])
    except RoutersploitException as err:
        raise err
    except KeyError:
        raise RoutersploitException("Save module {} doesn't exist.".format(save_name))


def get_save_protocal_info(save_directory: str = SAVE_DIR) -> list:
    """ Get all save module protocal info
    :return:
    """

    info_lst = []
    for save_name in index_modules(save_directory):
        save = get_save_module(save_name)
        try:
            info_lst.append(save.protocal_info())
        except Exception as err:
            print_error("Get save '{}' protocal Error: {}".format(save.save_name, str(err)))
    return info_lst


def save_to(save_protocal: str, results: dict):
    """
    :param save_protocal: save protocal str
    :return:
    """
    save_name, _, _ = save_protocal.strip().partition(':')
    try:
        save = get_save_module(save_name)
        save.save(save_protocal, results)
    except RoutersploitException as err:
        raise err
    except Exception as err:
        raise RoutersploitException(
            "Error during save result to '{}' Save module\n\n"
            "Error: {}\n\n".format(save_name, err)
        )


class ReadableDict(dict):

    def __init__(self, *args, **kwargs):
        super(ReadableDict, self).__init__(*args, **kwargs)
        self.error = TypeError("'{}' objects are only readable".format(self.__class__.__name__))

    def __setitem__(self, key, value):
        raise self.error

    def __delitem__(self, key):
        raise self.error
