from routersploit.core.exploit.exceptions import OptionValidationError
from routersploit.core.exploit.option import Option
from routersploit.extsploit.exploit.utils import get_engine_module, get_save_module


class OptEngine(Option):
    """ Option engine attribute """

    def __set__(self, instance, value):
        if not value:
            self.value = self.display_value = ''
            return

        name, _, _ = value.strip().partition(':')
        engine = get_engine_module(name)
        if engine.parse_protocal(value):
            self.value = self.display_value = value
        else:
            raise OptionValidationError("Invalid engine.")


class OptSave(Option):
    """ Option save attribute """

    def __set__(self, instance, value):
        if not value:
            self.value = self.display_value = ''
            return

        name, _, _ = value.strip().partition(':')
        save = get_save_module(name)
        if save.parse_protocal(value):
            self.value = self.display_value = value
        else:
            raise OptionValidationError("Invalid save")
